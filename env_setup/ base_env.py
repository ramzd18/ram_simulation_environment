from abc import ABC, abstractmethod
from typing import Optional, Tuple, List

class MyBaseEnv(ABC):
    @abstractmethod
    async def setup(self) -> None: ...
    @abstractmethod
    async def get_next_item(self) -> Optional[any]: ...
    @abstractmethod
    async def collect_trajectories(self, item) -> Tuple[any, List[any]]: ...
    @abstractmethod
    async def evaluate(self) -> float: ...
